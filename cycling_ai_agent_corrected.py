#!/usr/bin/env python3
"""
Cycling AI Agent Elite - Version Compl√®te Int√©gr√©e
Agent de coaching cycliste avec architecture elite compl√®te :
- Configuration centralis√©e (Killian : 320W FTP, 196 FC max)
- Monitoring LangSmith automatique
- Performance tracking en temps r√©el
- G√©n√©ration de s√©ances personnalis√©es
"""

import os
import sys
from pathlib import Path
from typing import List, Dict, Optional, Any
from datetime import datetime
import time
import re

# Ajouter le r√©pertoire courant au path pour les imports
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

# Charger le .env
try:
    from dotenv import load_dotenv
    load_dotenv()
    print("‚úÖ Fichier .env charg√©")
except ImportError:
    print("‚ö†Ô∏è python-dotenv non install√© (optionnel)")

# === IMPORTS ELITE ===

# Configuration Elite (donn√©es personnelles Killian)
try:
    from config.elite_config import EliteCoachConfig, get_elite_config, init_elite_config
    ELITE_CONFIG_AVAILABLE = True
    print("‚úÖ Configuration Elite disponible")
except ImportError:
    print("‚ùå Configuration Elite non trouv√©e - Cr√©ez config/elite_config.py")
    ELITE_CONFIG_AVAILABLE = False

# Monitoring Elite (LangSmith Observatory)
try:
    from langsmith_setup import EliteCyclingObservatory, init_elite_observatory, get_observatory, track_elite_operation
    ELITE_MONITORING_AVAILABLE = True
    print("‚úÖ Monitoring Elite disponible")
except ImportError:
    print("‚ùå Monitoring Elite non trouv√© - Cr√©ez langsmith_setup.py")
    ELITE_MONITORING_AVAILABLE = False

# LangChain imports avec gestion d'erreur
try:
    from langchain_openai import ChatOpenAI
    from langchain.memory import ConversationBufferWindowMemory
    from langchain.prompts import ChatPromptTemplate, MessagesPlaceholder
    from langchain.agents import create_openai_functions_agent, AgentExecutor
    from tools.periodization_tool import create_periodization_tool
    LANGCHAIN_AVAILABLE = True
    print("‚úÖ LangChain disponible")
except ImportError as e:
    print(f"‚ö†Ô∏è LangChain non install√©: {e}")
    print("üí° Installez avec: pip install langchain langchain-openai langchain-community faiss-cpu")
    LANGCHAIN_AVAILABLE = False

# Imports modulaires existants
try:
    from core.models import UserProfile, WorkoutRequest
    from core.knowledge_base import KnowledgeBaseManager
    from core.calculations import TrainingCalculations
    from tools.knowledge_tool import create_knowledge_tool
    from tools.workout_tool import create_workout_tool
    from generators.workout_builder import WorkoutBuilder
    from generators.file_generators import FileGenerator
    
    MODULES_LOADED = True
    print("‚úÖ Modules cycliste charg√©s")
    
except ImportError as e:
    print(f"‚ùå Erreur import modules: {e}")
    print("üí° Assurez-vous que tous les fichiers sont pr√©sents dans les bons dossiers")
    MODULES_LOADED = False

# === AGENT ELITE INT√âGR√â ===

class EliteCyclingAIAgent:
    """
    Agent de coaching cycliste Elite avec architecture compl√®te :
    - Configuration personnalis√©e (Killian : 320W FTP, 196 FC max)
    - Monitoring LangSmith temps r√©el
    - Performance tracking automatique
    - G√©n√©ration de s√©ances adapt√©es
    """
    
    def __init__(self, openai_api_key: str = None):
        """Initialise l'agent elite avec toute l'infrastructure"""
        
        print("\nüèÜ INITIALISATION AGENT ELITE")
        print("=" * 50)
        
        # V√©rifier les pr√©requis
        if not MODULES_LOADED:
            raise ImportError("Modules cycliste non disponibles")
        
        # 1. CONFIGURATION ELITE (donn√©es personnelles)
        self._init_elite_config()
        
        # 2. MONITORING ELITE (LangSmith Observatory)
        self._init_elite_monitoring()
        
        # 3. API Configuration
        self.api_key = openai_api_key or os.getenv("OPENAI_API_KEY")
        if not self.api_key:
            raise ValueError("Cl√© API OpenAI requise. D√©finissez OPENAI_API_KEY ou passez-la en param√®tre")
        
        # 4. Composants de base
        self._init_core_components()
        
        # 5. LangChain si disponible
        if LANGCHAIN_AVAILABLE:
            self._init_langchain_components()
        else:
            print("‚ö†Ô∏è Mode d√©grad√©: LangChain non disponible")
            self.agent_executor = None
        
        print("üöÄ Agent Elite initialis√© avec succ√®s !")
    
    def _init_elite_config(self):
        """Initialise la configuration elite avec les donn√©es personnelles"""
        
        if ELITE_CONFIG_AVAILABLE:
            try:
                # Charger la configuration existante
                self.elite_config = get_elite_config()
                
                # Si pas encore initialis√©e, cr√©er avec les donn√©es de base
                if not hasattr(self.elite_config, 'athlete'):
                    self.elite_config = init_elite_config()
                
                # Afficher le profil charg√©
                athlete = self.elite_config.athlete
                print(f"üë§ PROFIL CHARG√â : {athlete.name}")
                print(f"   ‚Ä¢ FTP: {athlete.ftp_watts}W ({athlete.ftp_per_kg}W/kg)")
                print(f"   ‚Ä¢ FC Max: {athlete.hr_max_bpm}bpm")
                print(f"   ‚Ä¢ Niveau: {athlete.experience_level}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur chargement config elite: {e}")
                self.elite_config = None
        else:
            print("‚ö†Ô∏è Configuration elite non disponible - Utilisation valeurs par d√©faut")
            self.elite_config = None
    
    def _init_elite_monitoring(self):
        """Initialise le monitoring elite LangSmith"""
        
        if ELITE_MONITORING_AVAILABLE:
            try:
                # Initialiser l'observatoire global
                self.observatory = init_elite_observatory("killian-elite-coach")
                print(f"üìä Observatoire Elite activ√© - Session: {self.observatory.session_id}")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur monitoring: {e}")
                self.observatory = None
        else:
            print("‚ö†Ô∏è Monitoring elite non disponible")
            self.observatory = None
    
    def _init_core_components(self):
        """Initialise les composants de base"""
        try:
            self.knowledge_manager = KnowledgeBaseManager()
            self.calculator = TrainingCalculations()
            self.workout_builder = WorkoutBuilder()
            self.file_generator = FileGenerator()
            print("‚úÖ Composants de base initialis√©s")
        except Exception as e:
            raise RuntimeError(f"Erreur initialisation composants: {e}")
    
    def _init_langchain_components(self):
        """Initialise les composants LangChain avec profil personnalis√©"""
        try:
            # LLM
            self.llm = ChatOpenAI(
                model="gpt-3.5-turbo",
                temperature=0.1,
                api_key=self.api_key,
                max_tokens=1500
            )
            
            # M√©moire
            self.memory = ConversationBufferWindowMemory(
                memory_key="chat_history",
                return_messages=True,
                k=8
            )
            
            # Outils (avec donn√©es personnalis√©es)
            self.tools = []
            try:
                knowledge_tool = create_knowledge_tool()
                workout_tool = create_workout_tool()
                periodization_tool = create_periodization_tool()
                
                self.tools = [knowledge_tool, workout_tool, periodization_tool]
                print("‚úÖ Outils LangChain cr√©√©s avec donn√©es personnalis√©es")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur cr√©ation outils: {e}")
                self.tools = []
            
            # Prompt syst√®me personnalis√©
            self.system_prompt = self._create_personalized_prompt()
            
            # Agent
            if self.tools:
                self.agent = create_openai_functions_agent(
                    llm=self.llm,
                    tools=self.tools,
                    prompt=self.system_prompt
                )
                
                self.agent_executor = AgentExecutor(
                    agent=self.agent,
                    tools=self.tools,
                    memory=self.memory,
                    verbose=False,
                    handle_parsing_errors=True,
                    max_iterations=5
                )
                print("‚úÖ Agent LangChain personnalis√© initialis√©")
            else:
                self.agent_executor = None
                print("‚ö†Ô∏è Agent non cr√©√© (pas d'outils)")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur LangChain: {e}")
            self.agent_executor = None
    
    def _create_personalized_prompt(self) -> ChatPromptTemplate:
        """Cr√©e un prompt syst√®me personnalis√© avec les donn√©es de l'athl√®te"""
        
        # R√©cup√©rer les donn√©es pour personnaliser le prompt
        if self.elite_config:
            athlete = self.elite_config.athlete
            athlete_info = f"""
PROFIL ATHL√àTE ACTUEL : {athlete.name}
‚Ä¢ FTP: {athlete.ftp_watts}W ({athlete.ftp_per_kg}W/kg)
‚Ä¢ FC Max: {athlete.hr_max_bpm}bpm
‚Ä¢ Niveau: {athlete.experience_level}
‚Ä¢ Zones cl√©s: 
  - Z2 Endurance: {athlete.power_zones['Z2']['min_watts']}-{athlete.power_zones['Z2']['max_watts']}W
  - Z4 Seuil: {athlete.power_zones['Z4']['min_watts']}-{athlete.power_zones['Z4']['max_watts']}W
  - Z5 VO2max: {athlete.power_zones['Z5']['min_watts']}-{athlete.power_zones['Z5']['max_watts']}W
"""
        else:
            athlete_info = "PROFIL ATHL√àTE : Configuration par d√©faut (320W FTP)"
        
        system_message = f"""Tu es un COACH CYCLISTE IA D'√âLITE personnalis√© pour cet athl√®te sp√©cifique.

{athlete_info}

üéØ MISSION PERSONNALIS√âE:
- Cr√©er des s√©ances EXACTEMENT adapt√©es √† ce profil
- Utiliser les zones de puissance PERSONNALIS√âES calcul√©es
- Proposer des progressions bas√©es sur les donn√©es actuelles
- Monitorer et tracker toutes les interactions

‚ö° G√âN√âRATION PERSONNALIS√âE:
‚Ä¢ Utilise TOUJOURS les donn√©es FTP r√©elles de l'athl√®te
‚Ä¢ Adapte les zones selon le profil exact
‚Ä¢ Propose des progressions coh√©rentes avec le niveau
‚Ä¢ Justifie scientifiquement chaque recommandation

üî¨ OUTILS DISPONIBLES:
‚Ä¢ 'cycling_knowledge' pour la th√©orie scientifique
‚Ä¢ 'generate_advanced_workout' avec les vraies donn√©es
‚Ä¢ 'create_periodization_plan' pour la planification long terme

üí° COACHING PERSONNALIS√â:
‚Ä¢ Analyse le profil complet avant chaque recommandation
‚Ä¢ Adapte le langage au niveau d'exp√©rience
‚Ä¢ Propose des d√©fis progressifs et r√©alisables
‚Ä¢ Fournis des conseils pratiques d'ex√©cution

üîß WORKFLOW ELITE:
1. Analyser le profil athl√®te actuel
2. Adapter la recommandation aux capacit√©s exactes
3. G√©n√©rer avec les param√®tres personnalis√©s
4. Expliquer le "pourquoi" scientifique
5. Proposer la suite logique

Sois un coach d'√©lite qui conna√Æt parfaitement cet athl√®te ! üèÜ"""
        
        return ChatPromptTemplate.from_messages([
            ("system", system_message),
            MessagesPlaceholder(variable_name="chat_history"),
            ("human", "{input}"),
            MessagesPlaceholder(variable_name="agent_scratchpad")
        ])
    
    # === M√âTHODES PRINCIPALES AVEC MONITORING ===
    
    def chat(self, message: str) -> str:
        """Interface de chat avec monitoring automatique"""
        
        start_time = time.time()
        
        try:
            if self.agent_executor:
                # Mode complet avec LangChain + monitoring
                response = self.agent_executor.invoke(
                    {"input": message},
                    return_only_outputs=True
                )
                result = response.get("output", "D√©sol√©, je n'ai pas pu traiter votre demande.")
                
                # Tracking automatique si observatoire disponible
                if self.observatory:
                    response_time = time.time() - start_time
                    self.observatory.counters["api_calls"] += 1
                
                return result
            else:
                # Mode d√©grad√© avec monitoring
                return self._fallback_response_with_monitoring(message, start_time)
                
        except Exception as e:
            if self.observatory:
                response_time = time.time() - start_time
                self.observatory.counters["errors"] += 1
            
            print(f"‚ö†Ô∏è Erreur agent: {e}")
            return self._fallback_response_with_monitoring(message, start_time)
    
    def _fallback_response_with_monitoring(self, message: str, start_time: float) -> str:
        """R√©ponse de fallback avec monitoring int√©gr√©"""
        
        message_lower = message.lower()
        
        # D√©tection d'intention avec donn√©es personnalis√©es
        if any(word in message_lower for word in ['s√©ance', 'workout', 'entrainement', 'entra√Ænement']):
            result = self._create_personalized_workout(message_lower)
        elif any(word in message_lower for word in ['zone', 'puissance', 'ftp']):
            result = self._provide_personalized_zone_info(message_lower)
        elif any(word in message_lower for word in ['plan', 'periodisation', 'planification']):
            result = self._create_periodization_plan(message_lower)
        elif any(word in message_lower for word in ['aide', 'help', 'bonjour', 'salut']):
            result = self._provide_personalized_help()
        else:
            result = self._provide_default_help()
        
        # Monitoring
        if self.observatory:
            response_time = time.time() - start_time
            self.observatory.performance_metrics["response_times"].append(response_time)
            self.observatory.counters["api_calls"] += 1
        
        return result
    
    def _create_personalized_workout(self, message: str) -> str:
        """Cr√©ation de s√©ance avec donn√©es exactes de l'athl√®te"""
        
        start_time = time.time()
        
        try:
            # Utiliser les donn√©es r√©elles de l'athl√®te
            athlete_ftp = 320  # Donn√©es par d√©faut
            athlete_level = "advanced"
            athlete_name = "Cycliste"
            
            if self.elite_config:
                athlete_ftp = self.elite_config.athlete.ftp_watts
                athlete_level = self.elite_config.athlete.experience_level
                athlete_name = self.elite_config.athlete.name
            
            # D√©tection type et dur√©e
            if 'vo2max' in message or 'vo2' in message:
                workout_type = 'vo2max'
            elif 'seuil' in message or 'threshold' in message or 'ftp' in message:
                workout_type = 'threshold'
            elif 'endurance' in message:
                workout_type = 'endurance'
            elif 'recovery' in message or 'r√©cup√©ration' in message:
                workout_type = 'recovery'
            else:
                workout_type = 'vo2max'  # Par d√©faut
            
            duration_match = re.search(r'(\d+)\s*(?:min|minutes?)', message)
            duration = int(duration_match.group(1)) if duration_match else 75
            
            # Cr√©er la s√©ance avec les donn√©es personnalis√©es
            workout = self.workout_builder.create_smart_workout(
                workout_type=workout_type,
                duration=duration,
                level=athlete_level,
                ftp=athlete_ftp
            )
            
            # Calculer m√©triques
            tss = self.calculator.calculate_tss(
                workout.segments, 
                workout.repeated_intervals, 
                athlete_ftp
            )
            workout.estimated_tss = tss
            
            # G√©n√©rer fichiers
            files = self.file_generator.generate_all_formats(workout)
            
            # Monitoring avec les donn√©es personnalis√©es
            if self.observatory:
                response_time = time.time() - start_time
                self.observatory.track_workout_generation(
                    workout_type=workout_type,
                    duration=duration,
                    athlete_level=athlete_level,
                    ftp=athlete_ftp,
                    response_time=response_time,
                    success=True
                )
            
            return f"""‚úÖ S√©ance personnalis√©e '{workout.name}' cr√©√©e pour {athlete_name} !

üë§ **Bas√©e sur ton profil:**
‚Ä¢ FTP: {athlete_ftp}W
‚Ä¢ Niveau: {athlete_level}

üìä **Ta s√©ance:**
{workout.description}

üéØ **Objectif scientifique:**
{workout.scientific_objective}

üìà **Tes m√©triques:**
‚Ä¢ Dur√©e: {workout.total_duration} minutes
‚Ä¢ TSS estim√©: {tss:.0f}
‚Ä¢ Temps haute intensit√©: {self.calculator.calculate_high_intensity_time(workout)} minutes

üìÅ **Fichiers g√©n√©r√©s:**
{chr(10).join([f"‚Ä¢ {k}: {Path(v).name}" for k, v in files.items()])}

üí° **Conseils personnalis√©s:**
{workout.coaching_tips}

üî• **Coach Elite:** La s√©ance est parfaitement calibr√©e sur tes {athlete_ftp}W de FTP !"""
            
        except Exception as e:
            if self.observatory:
                response_time = time.time() - start_time
                self.observatory.counters["errors"] += 1
            return f"‚ùå Erreur cr√©ation s√©ance personnalis√©e: {e}"
    
    def _provide_personalized_zone_info(self, message: str) -> str:
        """Informations sur les zones avec donn√©es exactes de l'athl√®te"""
        
        if not self.elite_config:
            return self.knowledge_manager.search_knowledge(message)
        
        athlete = self.elite_config.athlete
        
        # D√©tection zone sp√©cifique
        zone_map = {'z1': 'Z1', 'z2': 'Z2', 'z3': 'Z3', 'z4': 'Z4', 'z5': 'Z5', 'z6': 'Z6', 'z7': 'Z7'}
        
        for zone_key, zone_id in zone_map.items():
            if zone_key in message:
                power_zone = athlete.power_zones[zone_id]
                hr_zone = athlete.hr_zones.get(zone_id, (0, 0)) if zone_id in ['Z1', 'Z2', 'Z3', 'Z4', 'Z5'] else (0, 0)
                
                return f"""üîç **Ta Zone {zone_id} personnalis√©e - {power_zone['name']}**

‚ö° **Ta puissance:** {power_zone['min_watts']}-{power_zone['max_watts']}W
üíì **Ta FC:** {hr_zone[0] if hr_zone[0] > 0 else 'N/A'}-{hr_zone[1] if hr_zone[1] > 0 else 'N/A'}bpm
üìä **% de ton FTP ({athlete.ftp_watts}W):** {int(power_zone['min_watts']/athlete.ftp_watts*100)}-{int(power_zone['max_watts']/athlete.ftp_watts*100)}%

üéØ **Pour toi {athlete.name}:**
Cette zone repr√©sente {int((power_zone['min_watts'] + power_zone['max_watts'])/2)}W en moyenne.
Id√©al pour {power_zone['name'].lower()}.

üí° **Conseil perso:** Utilise un capteur de puissance pour rester dans cette plage exacte !"""
        
        # Affichage de toutes les zones
        return f"""üìä **Tes zones de puissance personnalis√©es (FTP: {athlete.ftp_watts}W):**

‚Ä¢ **Z1 R√©cup√©ration:** {athlete.power_zones['Z1']['min_watts']}-{athlete.power_zones['Z1']['max_watts']}W
‚Ä¢ **Z2 Endurance:** {athlete.power_zones['Z2']['min_watts']}-{athlete.power_zones['Z2']['max_watts']}W  ‚Üê Zone de base
‚Ä¢ **Z3 Tempo:** {athlete.power_zones['Z3']['min_watts']}-{athlete.power_zones['Z3']['max_watts']}W
‚Ä¢ **Z4 Seuil:** {athlete.power_zones['Z4']['min_watts']}-{athlete.power_zones['Z4']['max_watts']}W  ‚Üê Ton FTP !
‚Ä¢ **Z5 VO2max:** {athlete.power_zones['Z5']['min_watts']}-{athlete.power_zones['Z5']['max_watts']}W  ‚Üê Intervalles durs
‚Ä¢ **Z6 Ana√©robie:** {athlete.power_zones['Z6']['min_watts']}-{athlete.power_zones['Z6']['max_watts']}W
‚Ä¢ **Z7 Neuromusculaire:** {athlete.power_zones['Z7']['min_watts']}-{athlete.power_zones['Z7']['max_watts']}W

üéØ **Sp√©cialement calcul√©es pour toi !**"""
    
    def _create_periodization_plan(self, message: str) -> str:
        """Cr√©ation d'un plan de p√©riodisation personnalis√©"""
        
        if not self.elite_config:
            return "‚ö†Ô∏è Plan de p√©riodisation n√©cessite ta configuration elite"
        
        athlete = self.elite_config.athlete
        
        # D√©tection dur√©e
        duration_match = re.search(r'(\d+)\s*(?:semaine|week)', message)
        duration_weeks = int(duration_match.group(1)) if duration_match else 12
        
        return f"""üóìÔ∏è **Plan de p√©riodisation personnalis√© pour {athlete.name}**

üìä **Bas√© sur ton profil:**
‚Ä¢ FTP actuel: {athlete.ftp_watts}W
‚Ä¢ Niveau: {athlete.experience_level}
‚Ä¢ Objectifs: {', '.join(athlete.primary_goals)}

üéØ **Plan {duration_weeks} semaines:**
‚Ä¢ Projection FTP: {athlete.ftp_watts}W ‚Üí {int(athlete.ftp_watts * 1.08)}W (+{int(athlete.ftp_watts * 0.08)}W)
‚Ä¢ Mod√®le recommand√©: Polaris√© (Seiler)
‚Ä¢ TSS hebdomadaire: 300-450 points

üìÖ **Structure recommand√©e:**
‚Ä¢ Semaines 1-5: Base a√©robie (Z2 focus)
‚Ä¢ Semaines 6-10: D√©veloppement (Z4-Z5)
‚Ä¢ Semaines 11-{duration_weeks}: Pic et r√©cup√©ration

üí° **Pour g√©n√©rer le plan complet, utilise:**
"Cr√©e un plan de {duration_weeks} semaines avec mes donn√©es"

üöÄ **Ton coach elite va optimiser chaque phase pour maximiser tes gains !**"""
    
    def _provide_personalized_help(self) -> str:
        """Message d'aide personnalis√©"""
        
        athlete_info = ""
        if self.elite_config:
            athlete = self.elite_config.athlete
            athlete_info = f"""
üë§ **Ton profil actuel:**
‚Ä¢ {athlete.name}
‚Ä¢ FTP: {athlete.ftp_watts}W ({athlete.ftp_per_kg}W/kg)
‚Ä¢ FC Max: {athlete.hr_max_bpm}bpm
‚Ä¢ Niveau: {athlete.experience_level}
"""
        
        return f"""üèÜ **Coach Elite Personnalis√©**
{athlete_info}
üìã **Commandes sp√©cialement pour toi:**
‚Ä¢ `Cr√©e-moi une s√©ance VO2max de 75 minutes`
‚Ä¢ `S√©ance threshold avec mes zones`
‚Ä¢ `Plan de 12 semaines pour progression FTP`
‚Ä¢ `Mes zones de puissance`
‚Ä¢ `dashboard` - Voir tes statistiques
‚Ä¢ `profil` - Afficher ton profil complet

üéØ **S√©ances adapt√©es √† ton niveau:**
‚Ä¢ **VO2max:** Intervalles calibr√©s sur tes capacit√©s
‚Ä¢ **Threshold:** Blocs au seuil de ton FTP
‚Ä¢ **Endurance:** Base a√©robie optimis√©e

üí° **Ton coach elite conna√Æt ton profil et adapte tout automatiquement !**

Que veux-tu travailler aujourd'hui ? üöÄ"""
    
    def _provide_default_help(self) -> str:
        """Aide par d√©faut avec invitation √† personnaliser"""
        return """üö¥ Coach Elite: Je peux t'aider avec des s√©ances parfaitement calibr√©es !

‚Ä¢ G√©n√©ration de s√©ances personnalis√©es
‚Ä¢ Plans d'entra√Ænement long terme  
‚Ä¢ Informations sur tes zones exactes
‚Ä¢ Conseils de progression

Essaie: "Cr√©e-moi une s√©ance VO2max de 75 minutes"

üíé **Mode Elite activ√©** - Toutes tes s√©ances sont personnalis√©es avec tes vraies donn√©es !

Pour une exp√©rience compl√®te, assure-toi d'avoir :
‚Ä¢ `config/elite_config.py` avec tes donn√©es
‚Ä¢ `langsmith_setup.py` pour le monitoring"""
    
    def get_elite_dashboard(self) -> str:
        """Affiche le dashboard elite avec donn√©es personnalis√©es"""
        
        if not self.observatory:
            return "‚ö†Ô∏è Monitoring non disponible - V√©rifiez langsmith_setup.py"
        
        dashboard = self.observatory.get_performance_dashboard()
        
        # Ajouter les infos personnelles
        athlete_info = ""
        if self.elite_config:
            athlete = self.elite_config.athlete
            athlete_info = f"""
üë§ **TON PROFIL ACTUEL:**
‚Ä¢ Nom: {athlete.name}
‚Ä¢ FTP: {athlete.ftp_watts}W ({athlete.ftp_per_kg}W/kg)
‚Ä¢ FC Max: {athlete.hr_max_bpm}bpm
‚Ä¢ Niveau: {athlete.experience_level}
"""
        
        return f"""üèÜ **DASHBOARD ELITE PERSONNALIS√â**
{athlete_info}
üìä **PERFORMANCES SESSION:**
‚Ä¢ Temps de r√©ponse moyen: {dashboard['performance_metrics']['avg_response_time_seconds']}s
‚Ä¢ Taux de succ√®s: {dashboard['performance_metrics']['success_rate_percent']}%
‚Ä¢ S√©ances g√©n√©r√©es: {dashboard['usage_statistics']['workouts_generated']}
‚Ä¢ Plans cr√©√©s: {dashboard['usage_statistics']['plans_created']}

üéØ **USAGE POPULAIRE:**
{chr(10).join([f"‚Ä¢ {workout}: {count}" for workout, count in dashboard['popular_features']['top_workout_types']]) if dashboard['popular_features']['top_workout_types'] else "‚Ä¢ Aucune donn√©e encore"}

üîß **SYST√àME:**
‚Ä¢ LangSmith: {dashboard['system_health']['langsmith_status']}
‚Ä¢ Session: {dashboard['session_info']['session_id']}
‚Ä¢ Uptime: {dashboard['system_health']['uptime']}
‚Ä¢ M√©moire: {dashboard['system_health']['memory_usage']}"""
    
    def reset_conversation(self):
        """Reset de la conversation avec message personnalis√©"""
        if hasattr(self, 'memory') and self.memory:
            self.memory.clear()
            print("üîÑ Conversation remise √† z√©ro")
            if self.elite_config:
                print(f"üë§ Profil {self.elite_config.athlete.name} toujours actif")

# === FONCTIONS UTILITAIRES ===

def check_dependencies() -> Dict[str, bool]:
    """V√©rifie les d√©pendances install√©es"""
    deps = {
        "langchain": LANGCHAIN_AVAILABLE,
        "modules": MODULES_LOADED,
        "elite_config": ELITE_CONFIG_AVAILABLE,
        "elite_monitoring": ELITE_MONITORING_AVAILABLE,
        "openai_key": bool(os.getenv("OPENAI_API_KEY"))
    }
    return deps

def print_dependency_status():
    """Affiche le statut des d√©pendances"""
    deps = check_dependencies()
    
    print("\nüîç **Statut des d√©pendances:**")
    for name, status in deps.items():
        icon = "‚úÖ" if status else "‚ùå"
        print(f"{icon} {name}: {'OK' if status else 'Manquant'}")
    
    if not deps["langchain"]:
        print("\nüí° **Pour installer LangChain:**")
        print("pip install langchain langchain-openai langchain-community faiss-cpu")
    
    if not deps["elite_config"]:
        print("\nüí° **Pour la configuration elite:**")
        print("Cr√©ez le fichier config/elite_config.py avec vos donn√©es")
    
    if not deps["elite_monitoring"]:
        print("\nüí° **Pour le monitoring elite:**")
        print("Cr√©ez le fichier langsmith_setup.py")
    
    if not deps["openai_key"]:
        print("\nüí° **Pour configurer OpenAI:**")
        print("Cr√©ez un fichier .env avec: OPENAI_API_KEY=votre_cl√©_ici")

# === INTERFACE PRINCIPALE ELITE ===

def main():
    """Interface principale du coach elite int√©gr√©"""
    print("üèÜ ELITE CYCLING COACH - Architecture Compl√®te Int√©gr√©e")
    print("=" * 65)
    
    # V√©rifications pr√©alables
    print_dependency_status()
    
    if not MODULES_LOADED:
        print("\n‚ùå Modules de base manquants. Impossible de continuer.")
        return
    
    # V√©rifier cl√© API
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("\n‚ö†Ô∏è Cl√© API OpenAI non trouv√©e !")
        print("L'agent fonctionnera en mode d√©grad√©")
        
        choice = input("\nContinuer en mode d√©grad√© ? (o/n): ").lower()
        if choice != 'o':
            return
    
    try:
        # Initialiser l'agent elite
        coach = EliteCyclingAIAgent()
        
        print(f"\nüöÄ Coach Elite initialis√© avec succ√®s !")
        
        if coach.agent_executor:
            print("üß† Mode complet: LangChain + Monitoring + Config personnalis√©e")
        else:
            print("‚öôÔ∏è Mode d√©grad√©: Fonctionnalit√©s de base avec donn√©es personnalis√©es")
        
        # Afficher le profil si disponible
        if coach.elite_config:
            athlete = coach.elite_config.athlete
            print(f"\nüë§ Profil actif: {athlete.name} - {athlete.ftp_watts}W FTP ({athlete.ftp_per_kg}W/kg)")
        
        print("\nCommandes sp√©ciales:")
        print("‚Ä¢ 'dashboard' - Tableau de bord elite")
        print("‚Ä¢ 'profil' - Afficher le profil complet")
        print("‚Ä¢ 'quit' - Quitter")
        print("‚Ä¢ 'reset' - Nouvelle conversation")
        print("‚Ä¢ 'help' - Guide d'utilisation")
        print()
        
        # Boucle conversationnelle elite
        while True:
            user_input = input("üë§ Vous: ").strip()
            
            if user_input.lower() == 'quit':
                print("üëã Au revoir ! Excellents entra√Ænements !")
                if coach.observatory:
                    print("\nüìä R√©sum√© de la session:")
                    coach.observatory.print_elite_summary()
                break
                
            elif user_input.lower() == 'reset':
                coach.reset_conversation()
                continue
                
            elif user_input.lower() == 'dashboard':
                print(coach.get_elite_dashboard())
                continue
                
            elif user_input.lower() == 'profil':
                if coach.elite_config:
                    coach.elite_config.print_elite_config()
                else:
                    print("‚ö†Ô∏è Profil non disponible - Cr√©ez config/elite_config.py")
                continue
                
            elif user_input.lower() in ['help', 'aide']:
                print(coach._provide_personalized_help())
                continue
                
            elif not user_input:
                continue
            
            print(f"\nü§ñ Coach Elite: ")
            response = coach.chat(user_input)
            print(response)
            print()
    
    except Exception as e:
        print(f"\n‚ùå Erreur fatale: {e}")
        print("üí° V√©rifiez que tous les modules sont correctement install√©s")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()