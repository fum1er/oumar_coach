#!/usr/bin/env python3
"""
Cycling AI Agent - Version Corrig√©e et Modulaire
Agent de coaching cycliste avec architecture modulaire
"""

import os
import sys
from pathlib import Path
from typing import List, Dict, Optional, Any
# Ajouter le r√©pertoire courant au path pour les imports
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

# Charger le .env
try:
    from dotenv import load_dotenv
    load_dotenv()
    print("‚úÖ Fichier .env charg√©")
except ImportError:
    print("‚ö†Ô∏è python-dotenv non install√© (optionnel)")

# LangChain imports avec gestion d'erreur
try:
    from langchain_openai import ChatOpenAI
    from langchain.memory import ConversationBufferWindowMemory
    from langchain.prompts import ChatPromptTemplate, MessagesPlaceholder
    from langchain.agents import create_openai_functions_agent, AgentExecutor
    from tools.periodization_tool import create_periodization_tool
    LANGCHAIN_AVAILABLE = True
    print("‚úÖ LangChain disponible")
except ImportError as e:
    print(f"‚ö†Ô∏è LangChain non install√©: {e}")
    print("üí° Installez avec: pip install langchain langchain-openai langchain-community faiss-cpu")
    LANGCHAIN_AVAILABLE = False

# === IMPORTS MODULAIRES ===

try:
    # Core modules
    from core.models import UserProfile, WorkoutRequest
    from core.knowledge_base import KnowledgeBaseManager
    from core.calculations import TrainingCalculations
    
    # Tools
    from tools.knowledge_tool import create_knowledge_tool
    from tools.workout_tool import create_workout_tool
    
    # Generators
    from generators.workout_builder import WorkoutBuilder
    from generators.file_generators import FileGenerator
    
    MODULES_LOADED = True
    print("‚úÖ Modules cycliste charg√©s")
    
except ImportError as e:
    print(f"‚ùå Erreur import modules: {e}")
    print("üí° Assurez-vous que tous les fichiers sont pr√©sents dans les bons dossiers")
    MODULES_LOADED = False

# === AGENT PRINCIPAL CORRIG√â ===

class CyclingAIAgent:
    """Agent de coaching cycliste modulaire et robuste"""
    
    def __init__(self, openai_api_key: str = None):
        """Initialise l'agent avec gestion d'erreurs robuste"""
        
        # V√©rifier les pr√©requis
        if not MODULES_LOADED:
            raise ImportError("Modules cycliste non disponibles")
        
        # Configuration API
        self.api_key = openai_api_key or os.getenv("OPENAI_API_KEY")
        if not self.api_key:
            raise ValueError("Cl√© API OpenAI requise. D√©finissez OPENAI_API_KEY ou passez-la en param√®tre")
        
        # Initialiser les composants de base
        self._init_core_components()
        
        # Initialiser LangChain si disponible
        if LANGCHAIN_AVAILABLE:
            self._init_langchain_components()
        else:
            print("‚ö†Ô∏è Mode d√©grad√©: LangChain non disponible")
            self.agent_executor = None
    
    def _init_core_components(self):
        """Initialise les composants de base (toujours disponibles)"""
        try:
            self.knowledge_manager = KnowledgeBaseManager()
            self.calculator = TrainingCalculations()
            self.workout_builder = WorkoutBuilder()
            self.file_generator = FileGenerator()
            print("‚úÖ Composants de base initialis√©s")
        except Exception as e:
            raise RuntimeError(f"Erreur initialisation composants: {e}")
    
    def _init_langchain_components(self):
        """Initialise les composants LangChain (optionnel)"""
        try:
            # LLM
            self.llm = ChatOpenAI(
                model="gpt-3.5-turbo",
                temperature=0.1,
                api_key=self.api_key,
                max_tokens=1500
            )
            
            # M√©moire
            self.memory = ConversationBufferWindowMemory(
                memory_key="chat_history",
                return_messages=True,
                k=8
            )
            
            # Outils (avec fallback)
            self.tools = []
            try:
                knowledge_tool = create_knowledge_tool()
                workout_tool = create_workout_tool()
                self.tools = [knowledge_tool, workout_tool]
                print("‚úÖ Outils LangChain cr√©√©s")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur cr√©ation outils: {e}")
                self.tools = []
            
            # Prompt syst√®me
            self.system_prompt = self._create_system_prompt()
            
            # Agent (si outils disponibles)
            if self.tools:
                self.agent = create_openai_functions_agent(
                    llm=self.llm,
                    tools=self.tools,
                    prompt=self.system_prompt
                )
                
                self.agent_executor = AgentExecutor(
                    agent=self.agent,
                    tools=self.tools,
                    memory=self.memory,
                    verbose=False,
                    handle_parsing_errors=True,
                    max_iterations=5
                )

            # Outils (avec le nouveau)
            self.tools = []
            try:
                knowledge_tool = create_knowledge_tool()
                workout_tool = create_workout_tool()
                periodization_tool = create_periodization_tool()  # ‚≠ê NOUVEAU
                
                self.tools = [knowledge_tool, workout_tool, periodization_tool]
                print("‚úÖ Outils LangChain cr√©√©s (avec p√©riodisation)")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur cr√©ation outils: {e}")
                print("‚úÖ Agent LangChain initialis√©")
            else:
                self.agent_executor = None
                print("‚ö†Ô∏è Agent non cr√©√© (pas d'outils)")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur LangChain: {e}")
            self.agent_executor = None
    
    def _create_system_prompt(self) -> ChatPromptTemplate:
        """Cr√©e le prompt syst√®me optimis√©"""
        system_message = """Tu es un COACH CYCLISTE IA D'√âLITE avec une expertise scientifique approfondie.

‚ö° P√âRIODISATION AVANC√âE:
- Utilise 'create_periodization_plan' pour cr√©er des plans multi-semaines
- Bas√© sur les th√©ories de Seiler, Coggan, Friel, Issurin
- Mod√®les: Polaris√©, Pyramidal, Traditionnel, Block
- Personnalisation selon niveau et √©v√©nements cibles

üóìÔ∏è PLANIFICATION:
- Plans de 8-20 semaines
- Progression scientifique des charges
- P√©riodisation par phases
- Adaptation aux contraintes personnelles 

üß† EXPERTISE AVANC√âE:
‚Ä¢ Physiologie de l'exercice et adaptations cardiovasculaires
‚Ä¢ P√©riodisation bas√©e sur les recherches r√©centes (2023-2025)
‚Ä¢ Zones d'entra√Ænement pr√©cises avec justifications m√©taboliques
‚Ä¢ Personnalisation selon profil, niveau, objectifs et donn√©es de performance

üî¨ BASE DE CONNAISSANCES:
‚Ä¢ Utilise l'outil 'cycling_knowledge' pour acc√©der √† des informations pr√©cises
‚Ä¢ Zones de puissance: Z1 (45-55% FTP) √† Z7 (150-300% FTP)
‚Ä¢ Structures d'entra√Ænement valid√©es scientifiquement
‚Ä¢ Adaptations selon niveau (d√©butant/interm√©diaire/avanc√©)

‚ö° G√âN√âRATION DE S√âANCES:
‚Ä¢ Utilise 'generate_advanced_workout' pour cr√©er des s√©ances optimis√©es
‚Ä¢ JAMAIS de valeurs 0.000 pour la puissance (minimum 40% FTP)
‚Ä¢ Justifications scientifiques pour chaque segment
‚Ä¢ Adaptation automatique selon niveau et objectifs

üéØ PERSONNALISATION:
‚Ä¢ Analyse toujours le profil complet de l'athl√®te
‚Ä¢ Adapte volume, intensit√© et complexit√© selon le niveau
‚Ä¢ Int√®gre les objectifs sp√©cifiques (FTP, endurance, comp√©tition)
‚Ä¢ Fournit des conseils de coaching personnalis√©s

üí¨ COMMUNICATION:
‚Ä¢ Explique TOUJOURS le "pourquoi" scientifique
‚Ä¢ Utilise un langage motivant et encourageant
‚Ä¢ Structure tes r√©ponses avec √©mojis pour la clart√©
‚Ä¢ Fournis des conseils pratiques d'ex√©cution

üîß WORKFLOW:
1. Si demande de s√©ance ‚Üí Utilise generate_advanced_workout avec param√®tres pr√©cis
2. Si question technique ‚Üí Utilise cycling_knowledge pour informations exactes
3. Toujours contextualiser et personnaliser selon l'utilisateur
4. Terminer par des conseils pratiques et motivation

Sois un coach d'√©lite qui rivalise avec les meilleurs entra√Æneurs mondiaux !"""
        
        return ChatPromptTemplate.from_messages([
            ("system", system_message),
            MessagesPlaceholder(variable_name="chat_history"),
            ("human", "{input}"),
            MessagesPlaceholder(variable_name="agent_scratchpad")
        ])
    
    def chat(self, message: str) -> str:
        """Interface de chat avec fallback intelligent"""
        
        if self.agent_executor:
            # Mode complet avec LangChain
            try:
                response = self.agent_executor.invoke(
                    {"input": message},
                    return_only_outputs=True
                )
                return response.get("output", "D√©sol√©, je n'ai pas pu traiter votre demande.")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur agent: {e}")
                return self._fallback_response(message)
        else:
            # Mode d√©grad√© sans LangChain
            return self._fallback_response(message)
    
    def _fallback_response(self, message: str) -> str:
        """R√©ponse de fallback sans LangChain"""
        message_lower = message.lower()
        
        # D√©tection d'intention simple
        if any(word in message_lower for word in ['s√©ance', 'workout', 'entrainement', 'entra√Ænement']):
            return self._create_simple_workout(message_lower)
        elif any(word in message_lower for word in ['zone', 'puissance', 'ftp']):
            return self._provide_zone_info(message_lower)
        elif any(word in message_lower for word in ['aide', 'help', 'bonjour', 'salut']):
            return self._provide_help()
        else:
            return """üö¥ Coach IA: Je peux vous aider avec :
‚Ä¢ G√©n√©ration de s√©ances d'entra√Ænement personnalis√©es
‚Ä¢ Informations sur les zones de puissance
‚Ä¢ Conseils d'entra√Ænement cycliste

Essayez: "Cr√©e-moi une s√©ance VO2max de 75 minutes" ou "Explique-moi la zone 4"
            
üí° Pour une exp√©rience compl√®te, installez LangChain avec:
pip install langchain langchain-openai langchain-community"""
    
    def _create_simple_workout(self, message: str) -> str:
        """Cr√©ation de s√©ance simplifi√©e sans LangChain"""
        try:
            # D√©tection type
            if 'vo2max' in message or 'vo2' in message:
                workout_type = 'vo2max'
            elif 'seuil' in message or 'threshold' in message or 'ftp' in message:
                workout_type = 'threshold'
            elif 'endurance' in message:
                workout_type = 'endurance'
            else:
                workout_type = 'vo2max'  # Par d√©faut
            
            # D√©tection dur√©e
            import re
            duration_match = re.search(r'(\d+)\s*(?:min|minutes?)', message)
            duration = int(duration_match.group(1)) if duration_match else 75
            
            # Cr√©er la s√©ance
            workout = self.workout_builder.create_smart_workout(
                workout_type=workout_type,
                duration=duration,
                level="intermediate",
                ftp=320
            )
            
            # Calculer m√©triques
            tss = self.calculator.calculate_tss(
                workout.segments, 
                workout.repeated_intervals, 
                workout.ftp
            )
            workout.estimated_tss = tss
            
            # G√©n√©rer fichiers
            files = self.file_generator.generate_all_formats(workout)
            
            return f"""‚úÖ S√©ance '{workout.name}' cr√©√©e !

üìä **R√©sum√©:**
{workout.description}

üéØ **Objectif:**
{workout.scientific_objective}

üìà **M√©triques:**
‚Ä¢ Dur√©e: {workout.total_duration} minutes
‚Ä¢ TSS estim√©: {tss:.0f}
‚Ä¢ Temps haute intensit√©: {self.calculator.calculate_high_intensity_time(workout)} minutes

üìÅ **Fichiers g√©n√©r√©s:**
{chr(10).join([f"‚Ä¢ {k}: {Path(v).name}" for k, v in files.items()])}

üí° **Conseils:**
{workout.coaching_tips}

üîß **Mode d√©grad√© actif** - Installez LangChain pour plus de fonctionnalit√©s"""
            
        except Exception as e:
            return f"‚ùå Erreur cr√©ation s√©ance: {e}"
    
    def _provide_zone_info(self, message: str) -> str:
        """Fournit des informations sur les zones"""
        # D√©tection zone
        zone_map = {'z1': 'Z1', 'z2': 'Z2', 'z3': 'Z3', 'z4': 'Z4', 'z5': 'Z5'}
        
        for zone_key, zone_id in zone_map.items():
            if zone_key in message:
                zone_info = self.knowledge_manager.get_zone_info(zone_id)
                if zone_info:
                    return f"""üîç **Zone {zone_id} - {zone_info.name}**

‚ö° **Puissance:** {zone_info.power_pct_ftp[0]*100:.0f}-{zone_info.power_pct_ftp[1]*100:.0f}% FTP
üíì **Fr√©quence cardiaque:** {zone_info.hr_pct_max[0]}-{zone_info.hr_pct_max[1]}% FCmax
üîÑ **Cadence:** {zone_info.cadence_rpm[0]}-{zone_info.cadence_rpm[1]} RPM

üéØ **Objectif:**
{zone_info.objective}

‚è∞ **Dur√©e typique:** {zone_info.duration_typical}

üèÉ **Utilisation:** {zone_info.when_use}"""
        
        return self.knowledge_manager.search_knowledge(message)
    
    def _provide_help(self) -> str:
        """Message d'aide"""
        return """üö¥ **Cycling AI Coach - Guide d'utilisation**

üìã **Commandes disponibles:**
‚Ä¢ `Cr√©e une s√©ance VO2max de 75 minutes`
‚Ä¢ `S√©ance threshold pour interm√©diaire`
‚Ä¢ `Explique la zone 4`
‚Ä¢ `Infos sur le seuil lactique`

üéØ **Types de s√©ances:**
‚Ä¢ **VO2max:** Intervalles haute intensit√© (Z5)
‚Ä¢ **Threshold:** S√©ances au seuil (Z4) 
‚Ä¢ **Endurance:** Base a√©robie (Z2)
‚Ä¢ **Recovery:** R√©cup√©ration active (Z1)

‚öôÔ∏è **Param√®tres personnalisables:**
‚Ä¢ Dur√©e (30-180 minutes)
‚Ä¢ Niveau (d√©butant/interm√©diaire/avanc√©)
‚Ä¢ Type d'objectif

üí° **Pour une exp√©rience compl√®te:**
Installez LangChain pour des conversations avanc√©es et personnalisation pouss√©e.

Que souhaitez-vous faire aujourd'hui ? üöÄ"""
    
    def reset_conversation(self):
        """Reset de la conversation"""
        if hasattr(self, 'memory') and self.memory:
            self.memory.clear()
            print("üîÑ Conversation remise √† z√©ro")

# === FONCTIONS UTILITAIRES ===

def check_dependencies() -> Dict[str, bool]:
    """V√©rifie les d√©pendances install√©es"""
    deps = {
        "langchain": LANGCHAIN_AVAILABLE,
        "modules": MODULES_LOADED,
        "openai_key": bool(os.getenv("OPENAI_API_KEY"))
    }
    return deps

def print_dependency_status():
    """Affiche le statut des d√©pendances"""
    deps = check_dependencies()
    
    print("\nüîç **Statut des d√©pendances:**")
    for name, status in deps.items():
        icon = "‚úÖ" if status else "‚ùå"
        print(f"{icon} {name}: {'OK' if status else 'Manquant'}")
    
    if not deps["langchain"]:
        print("\nüí° **Pour installer LangChain:**")
        print("pip install langchain langchain-openai langchain-community faiss-cpu")
    
    if not deps["openai_key"]:
        print("\nüí° **Pour configurer OpenAI:**")
        print("Cr√©ez un fichier .env avec: OPENAI_API_KEY=votre_cl√©_ici")

# === INTERFACE PRINCIPALE ===

def main():
    """Interface principale robuste"""
    print("üö¥ CYCLING AI COACH - Version Corrig√©e et Modulaire")
    print("=" * 65)
    
    # V√©rifier les d√©pendances
    print_dependency_status()
    
    if not MODULES_LOADED:
        print("\n‚ùå Modules de base manquants. Impossible de continuer.")
        return
    
    # V√©rifier cl√© API
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("\n‚ö†Ô∏è Cl√© API OpenAI non trouv√©e !")
        print("L'agent fonctionnera en mode d√©grad√© (sans IA conversationnelle)")
        print("Pour activer toutes les fonctionnalit√©s, d√©finissez OPENAI_API_KEY")
        
        choice = input("\nContinuer en mode d√©grad√© ? (o/n): ").lower()
        if choice != 'o':
            return
    
    try:
        # Initialiser l'agent
        coach = CyclingAIAgent()
        
        print(f"\n‚úÖ Coach IA initialis√© avec succ√®s !")
        
        if coach.agent_executor:
            print("üß† Mode complet: LangChain + IA conversationnelle")
        else:
            print("‚öôÔ∏è Mode d√©grad√©: Fonctionnalit√©s de base disponibles")
        
        print("\nTapez 'quit' pour quitter, 'reset' pour nouvelle conversation")
        print("Tapez 'help' pour voir les commandes disponibles")
        print()
        
        # Boucle conversationnelle
        while True:
            user_input = input("üë§ Vous: ").strip()
            
            if user_input.lower() == 'quit':
                print("üëã Au revoir ! Excellents entra√Ænements !")
                break
            elif user_input.lower() == 'reset':
                coach.reset_conversation()
                continue
            elif user_input.lower() in ['help', 'aide']:
                print(coach._provide_help())
                continue
            elif not user_input:
                continue
            
            print(f"\nü§ñ Coach IA: ")
            response = coach.chat(user_input)
            print(response)
            print()
    
    except Exception as e:
        print(f"\n‚ùå Erreur fatale: {e}")
        print("üí° V√©rifiez que tous les modules sont correctement install√©s")

if __name__ == "__main__":
    main()